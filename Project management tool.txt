PowerShell:


PS C:\Users\Namrata> cd "C:\Users\Namrata\CodeAlpha Project Management Tool\client"
PS C:\Users\Namrata\CodeAlpha Project Management Tool\client> npm init -y
Wrote to C:\Users\Namrata\CodeAlpha Project Management Tool\client\package.json:

{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "react": "^19.1.0",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "^19.1.0",
    "react-scripts": "^5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "description": "This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).",
  "main": "index.js",
  "devDependencies": {},
  "keywords": [],
  "author": "",
  "license": "ISC"
}



PS C:\Users\Namrata\CodeAlpha Project Management Tool\client> npm install

up to date, audited 1354 packages in 6s

269 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (3 moderate, 6 high)

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
PS C:\Users\Namrata\CodeAlpha Project Management Tool\client> npm start

> client@0.1.0 start
> react-scripts start

(node:19872) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:19872) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: 'onBeforeSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
Starting the development server...
Compiled successfully!

You can now view client in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.211.234:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully
No issues found.


Compiled successfully!

You can now view client in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.211.234:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully
No issues found.


Frontend:
 src-
  components-
   Comments.js:
   import React, { useState } from 'react';
import axios from 'axios';
import { io } from 'socket.io-client';

const socket = io('http://localhost:5000');

const Comment = ({ taskId }) => {
  const [comment, setComment] = useState('');

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    const userId = JSON.parse(atob(token.split('.')[1])).id; // Decode token to get user ID

    await axios.post(`http://localhost:5000/api/tasks/${taskId}/comments`, { user: userId, text: comment });
    setComment('');
  };

  return (
    <form onSubmit={handleCommentSubmit}>
      <input
        type="text"
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        placeholder="Add a comment"
        required
      />
      <button type="submit">Comment</button>
    </form>
  );
};

export default Comment;
   
   Header.js: 
   import React from 'react';
import { Link } from 'react-router-dom';

const Header = () => {
  return (
    <header>
      <h1>Project Management Tool</h1>
      <nav>
        <Link to="/">Home</Link>
        <Link to="/login">Login</Link>
      </nav>
    </header>
  );
};

export default Header;

   Login.js:
   import React, { useState } from 'react';
import axios from 'axios';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });
      localStorage.setItem('token', response.data.token); // Store token in local storage
      // Redirect to project list or home page
      window.location.href = '/';
    } catch (err) {
      setError('Invalid credentials');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email" required />
      <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Password" required />
      <button type="submit">Login</button>
      {error && <p>{error}</p>}
    </form>
  );
};

export default Login;

   ProjectForm.js:
   import React, { useState } from 'react';
import axios from 'axios';

const ProjectForm = () => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    const userId = JSON.parse(atob(token.split('.')[1])).id; // Decode token to get user ID

    await axios.post('http://localhost:5000/api/projects', {
      name,
      description,
      createdBy: userId,
      members: [userId] // Add the creator as a member
    });

    setName('');
    setDescription('');
    // Optionally, refresh the project list or redirect
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Project Name" required />
      <textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Project Description" required />
      <button type="submit">Create Project</button>
    </form>
  );
};

export default ProjectForm;

   ProjectList.js:
   import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { io } from 'socket.io-client';
import ProjectForm from './ProjectForm';

const socket = io('http://localhost:5000');

const ProjectList = () => {
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    const fetchProjects = async () => {
      const response = await axios.get('http://localhost:5000/api/projects');
      setProjects(response.data);
    };
    fetchProjects();

    socket.on('projectCreated', (project) => {
      setProjects((prevProjects) => [...prevProjects, project]);
    });

    return () => {
      socket.off('projectCreated');
    };
  }, []);

  return (
    <div>
      <h2>Projects</h2>
      <ProjectForm />
      <ul>
        {projects.map((project) => (
          <li key={project._id}>
            {project.name}
            {/* Add a button to view tasks for this project */}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ProjectList;

   TaskForm.js:
   import React, { useState } from 'react';
import axios from 'axios';

const TaskForm = ({ projectId }) => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [assignedTo, setAssignedTo] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    const userId = JSON.parse(atob(token.split('.')[1])).id; // Decode token to get user ID

    const response = await axios.post('http://localhost:5000/api/tasks', {
      title,
      description,
      assignedTo,
      project: projectId
    });

    setTitle('');
    setDescription('');
    setAssignedTo('');
    // Optionally, refresh the task list or redirect
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} placeholder="Task Title" required />
      <textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Task Description" required />
      <input type="text" value={assignedTo} onChange={(e) => setAssignedTo(e.target.value)} placeholder="Assign to User ID" required />
      <button type="submit">Create Task</button>
    </form>
  );
};

export default TaskForm;

   TaskList.js: 
   import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { io } from 'socket.io-client';
import TaskForm from './TaskForm';

const socket = io('http://localhost:5000');

const TaskList = ({ projectId }) => {
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    const fetchTasks = async () => {
      const response = await axios.get(`http://localhost:5000/api/tasks?projectId=${projectId}`);
      setTasks(response.data);
    };
    fetchTasks();

    socket.on('taskCreated', (task) => {
      setTasks((prevTasks) => [...prevTasks, task]);
    });

    return () => {
      socket.off('taskCreated');
    };
  }, [projectId]);

  return (
    <div>
      <h3>Tasks</h3>
      <TaskForm projectId={projectId} />
      <ul>
        {tasks.map((task) => (
          <li key={task._id}>
            {task.title}
            {/* Add functionality to comment on tasks */}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TaskList;

 styles-
  Header.css:
     /* src/styles/Header.css */
   header {
     background-color: #282c34;
     padding: 20px;
     color: white;
     text-align: center;
   }
    
 Apps.js:
 import React, { useState } from 'react';
import axios from 'axios';
import { io } from 'socket.io-client';

const socket = io('http://localhost:5000');

const Comment = ({ taskId }) => {
  const [comment, setComment] = useState('');

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    const user = 'userId'; // Replace with actual user ID
    await axios.post(`http://localhost:5000/api/tasks/${taskId}/comments`, { user, text: comment });
    setComment('');
  };

  return (
    <form onSubmit={handleCommentSubmit}>
      <input
        type="text"
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        placeholder="Add a comment"
        required
      />
      <button type="submit">Comment</button>
    </form>
  );
};

export default Comment;

 package.json:
 {
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^5.0.1",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "axios": "^1.6.2",
    "react-router-dom": "^6.22.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


Backend:
 server.js:
 const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const connectDB = require('./config/db');
const authRoutes = require('./routes/auth');
const projectRoutes = require('./routes/projects');
const taskRoutes = require('./routes/tasks');
const dotenv = require('dotenv');

dotenv.config();
connectDB();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());
app.use('/api/auth', authRoutes);
app.use('/api/projects', projectRoutes);
app.use('/api/tasks', taskRoutes);

// Socket.io connection
io.on('connection', (socket) => {
  console.log('New client connected');

  socket.on('disconnect', () => {
    console.log('Client disconnected');
  });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

module.exports = { io };

 db.js:
 const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (error) {
    console.error('MongoDB connection failed:', error.message);
    process.exit(1);
  }
};

module.exports = connectDB;

 .env:
 MONGO_URI=your_mongodb_connection_string
JWT_SECRET=your_jwt_secret

 models-
  Projects.js:
  const mongoose = require('mongoose');

const ProjectSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User ', required: true },
  members: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User ' }],
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Project', ProjectSchema);

  task.js:
  const mongoose = require('mongoose');

const TaskSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String },
  assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User ' },
  project: { type: mongoose.Schema.Types.ObjectId, ref: 'Project' },
  comments: [{ user: { type: mongoose.Schema.Types.ObjectId, ref: 'User ' }, text: String, createdAt: { type: Date, default: Date.now } }],
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Task', TaskSchema);

  User.js:
  const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('User ', UserSchema);


  routes-
  auth.js:
  const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

// Register
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ username, email, password: hashedPassword });
  await user.save();
  res.status(201).json({ message: 'User  created' });
});

// Login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

module.exports = router;


  projects.js:
  const express = require('express');
const Project = require('../models/Project');
const { io } = require('../server');

const router = express.Router();

// Create Project
router.post('/', async (req, res) => {
  const { name, description, createdBy, members } = req.body;
  const project = new Project({ name, description, createdBy, members });
  await project.save();
  
  // Emit event for real-time updates
  io.emit('projectCreated', project);
  
  res.status(201).json(project);
});

// Get Projects
router.get('/', async (req, res) => {
  const projects = await Project.find().populate('members').populate('createdBy');
  res.json(projects);
});

module.exports = router;


  tasks.js:
  const express = require('express');
const Task = require('../models/task');
const { io } = require('../server');

const router = express.Router();
// Create Task
router.post('/', async (req, res) => {
  const { title, description, assignedTo, project } = req.body;
  const task = new Task({ title, description, assignedTo, project });
  await task.save();
  
  // Emit event for real-time updates
  io.to(project).emit('taskCreated', task);
  
  res.status(201).json(task);
});

// Get Tasks
router.get('/', async (req, res) => {
  const tasks = await Task.find().populate('assignedTo').populate('project');
  res.json(tasks);
});

// Add Comment
router.post('/:taskId/comments', async (req, res) => {
  const { taskId } = req.params;
  const { user, text } = req.body;
  
  const task = await Task.findById(taskId);
  task.comments.push({ user, text });
  await task.save();
  
  // Emit event for real-time updates
  io.to(task.project).emit('commentAdded', { taskId, user, text });
  
  res.status(201).json(task);
});

module.exports = router;
